import tkinter as tk
from tkinter import filedialog, messagebox, ttk
import hashlib
import requests
import os
import datetime
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

# API-–∫–ª—é—á VirusTotal
VIRUSTOTAL_API_KEY = 'c0f616860cd015f235deef3012cdb029912cd47d784eaa6526e6e87aa8be63c3'
VIRUS_DB = 'virus_db.txt'
SCAN_HISTORY = 'scan_history.txt'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è SHA256-—Ö—ç—à–∞ —Ñ–∞–π–ª–∞
def calculate_file_hash(file_path):
    sha256_hash = hashlib.sha256()
    try:
        with open(file_path, 'rb') as f:
            for byte_block in iter(lambda: f.read(4096), b""):
                sha256_hash.update(byte_block)
        return sha256_hash.hexdigest()
    except Exception as e:
        print(f"[!] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —Ö—ç—à–∞: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤ VirusTotal
def upload_file_to_virustotal(file_path):
    url = 'https://www.virustotal.com/api/v3/files'
    headers = {'x-apikey': VIRUSTOTAL_API_KEY}
    try:
        with open(file_path, 'rb') as file:
            files = {'file': (os.path.basename(file_path), file)}
            response = requests.post(url, headers=headers, files=files)
            if response.status_code == 200:
                data = response.json()
                return data['data']['id']  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –∞–Ω–∞–ª–∏–∑–∞
            else:
                print(f"[!] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {response.status_code}")
                return None
    except Exception as e:
        print(f"[!] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ ID
def get_analysis_results(analysis_id):
    url = f'https://www.virustotal.com/api/v3/analyses/{analysis_id}'
    headers = {'x-apikey': VIRUSTOTAL_API_KEY}
    try:
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            data = response.json()
            return data['data']['attributes']['stats']  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–Ω–∞–ª–∏–∑–∞
        else:
            print(f"[!] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞: {response.status_code}")
            return None
    except Exception as e:
        print(f"[!] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return None

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö—ç—à–∞ —á–µ—Ä–µ–∑ VirusTotal
def fetch_hashes_from_virustotal(file_hash, file_path):
    url = f'https://www.virustotal.com/api/v3/files/{file_hash}'
    headers = {'x-apikey': VIRUSTOTAL_API_KEY}

    try:
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            data = response.json()
            if data['data']['attributes']['last_analysis_stats']['malicious'] > 0:
                with open(VIRUS_DB, 'a') as db:
                    db.write(f'{file_hash} | {file_path}\n')
                with open(SCAN_HISTORY, 'a') as history:
                    history.write(f'{datetime.datetime.now()} | –í—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–π —Ñ–∞–π–ª: {file_path}\n')
                return False
            else:
                with open(SCAN_HISTORY, 'a') as history:
                    history.write(f'{datetime.datetime.now()} | –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ñ–∞–π–ª: {file_path}\n')
                return True
        elif response.status_code == 404:
            # –•—ç—à –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            analysis_id = upload_file_to_virustotal(file_path)
            if analysis_id:
                import time
                time.sleep(10)  # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
                stats = get_analysis_results(analysis_id)
                if stats:
                    if stats['malicious'] > 0:
                        with open(VIRUS_DB, 'a') as db:
                            db.write(f'{file_hash} | {file_path}\n')
                        with open(SCAN_HISTORY, 'a') as history:
                            history.write(f'{datetime.datetime.now()} | –í—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–π —Ñ–∞–π–ª: {file_path}\n')
                        return False
                    else:
                        with open(SCAN_HISTORY, 'a') as history:
                            history.write(f'{datetime.datetime.now()} | –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ñ–∞–π–ª: {file_path}\n')
                        return True
                else:
                    return None
            else:
                return None
        else:
            return None
    except Exception as e:
        print(f'[!] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ VirusTotal: {e}')
        return None

# –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
def scan_file(file_path, progress_bar=None, status_label=None):
    if progress_bar and status_label:
        progress_bar.pack(pady=10)
        status_label.config(text="üîÑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞...")
        progress_bar.start()

    file_hash = calculate_file_hash(file_path)
    if file_hash:
        result = fetch_hashes_from_virustotal(file_hash, file_path)
        if result is False:
            messagebox.showwarning("‚ö†Ô∏è –í—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–π —Ñ–∞–π–ª", f"–§–∞–π–ª {file_path} –∑–∞—Ä–∞–∂–µ–Ω!")
        elif result is True:
            messagebox.showinfo("‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ñ–∞–π–ª", f"–§–∞–π–ª {file_path} –±–µ–∑–æ–ø–∞—Å–µ–Ω.")
        else:
            messagebox.showerror("‚ùå –û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª.")

    if progress_bar and status_label:
        progress_bar.stop()
        progress_bar.pack_forget()
        status_label.config(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª")

# –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞
def scan_home_directory(progress_bar, status_label):
    home_dir = os.path.expanduser("~")
    malicious_files = 0
    total_files = 0

    progress_bar.pack(pady=10)
    status_label.config(text="üîÑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞...")
    progress_bar.start()

    for root, _, files in os.walk(home_dir):
        for file in files:
            total_files += 1
            file_path = os.path.join(root, file)
            file_hash = calculate_file_hash(file_path)
            if file_hash:
                result = fetch_hashes_from_virustotal(file_hash, file_path)
                if result is False:
                    malicious_files += 1

    progress_bar.stop()
    progress_bar.pack_forget()
    status_label.config(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª")
    messagebox.showinfo(
        "üìä –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
        f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {total_files}\n–í—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {malicious_files}"
    )

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def update_virus_db():
    try:
        import subprocess
        subprocess.run(['python3', 'virus_updater.py'], check=True)
        messagebox.showinfo("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ", "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–∏—Ä—É—Å–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    except subprocess.CalledProcessError:
        messagebox.showerror("‚ùå –û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")

# –ò—Å—Ç–æ—Ä–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
def show_scan_history():
    history_window = tk.Toplevel()
    history_window.title("üìú –ò—Å—Ç–æ—Ä–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
    history_window.geometry("500x400")
    text_area = tk.Text(history_window, wrap='word')
    text_area.pack(expand=1, fill='both')

    try:
        with open(SCAN_HISTORY, 'r') as history:
            text_area.insert('1.0', history.read())
    except FileNotFoundError:
        text_area.insert('1.0', "–ò—Å—Ç–æ—Ä–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É—Å—Ç–∞.")
    text_area.config(state='disabled')

# –ö–ª–∞—Å—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ Downloads
class DownloadsWatcher(FileSystemEventHandler):
    def __init__(self, progress_bar, status_label):
        self.progress_bar = progress_bar
        self.status_label = status_label

    def on_created(self, event):
        if not event.is_directory:
            file_path = event.src_path
            scan_file(file_path, self.progress_bar, self.status_label)

# GUI
def create_gui():
    root = tk.Tk()
    root.title("üõ°Ô∏è ZERO-ANTIVIRUS TOOL")
    root.geometry("600x500")
    root.configure(bg="#1E1E2E")

    style = ttk.Style()
    style.configure('TButton', font=('Arial', 12), padding=10, background="#4CAF50")
    style.configure('TLabel', font=('Arial', 12), background="#1E1E2E", foreground="white")
    style.configure('TFrame', background="#1E1E2E")

    tab_control = ttk.Notebook(root)
    tab_scan = ttk.Frame(tab_control)
    tab_history = ttk.Frame(tab_control)
    tab_update = ttk.Frame(tab_control)

    tab_control.add(tab_scan, text="üõ°Ô∏è –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
    tab_control.add(tab_history, text="üìú –ò—Å—Ç–æ—Ä–∏—è")
    tab_control.pack(expand=1, fill='both')

    # –í–∫–ª–∞–¥–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    status_label = ttk.Label(tab_scan, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª")
    status_label.pack(pady=10)
    progress_bar = ttk.Progressbar(tab_scan, mode='indeterminate')

    ttk.Button(tab_scan, text="üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª", command=lambda: scan_file(filedialog.askopenfilename(title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"), progress_bar, status_label)).pack(pady=10)
    ttk.Button(tab_scan, text="üè† –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–æ–º–∞—à–Ω–∏–π –∫–∞—Ç–∞–ª–æ–≥",
               command=lambda: scan_home_directory(progress_bar, status_label)).pack(pady=10)

    # –í–∫–ª–∞–¥–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
    ttk.Button(tab_history, text="üìú –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é", command=show_scan_history).pack(pady=20)

    footer = ttk.Label(root, text="¬© 2024 ZERO-ANTIVIRUS TOOL. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.", font=("Arial", 10))
    footer.pack(side='bottom', pady=10)

    # –ó–∞–ø—É—Å–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏ Downloads
    downloads_path = os.path.expanduser("~/Downloads")
    event_handler = DownloadsWatcher(progress_bar, status_label)
    observer = Observer()
    observer.schedule(event_handler, path=downloads_path, recursive=False)
    observer.start()

    root.mainloop()

# –ó–∞–ø—É—Å–∫ GUI
if __name__ == '__main__':
    create_gui()
