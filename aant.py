import tkinter as tk
from tkinter import filedialog, messagebox, ttk
import hashlib
import requests
import os
import datetime
import logging
from concurrent.futures import ThreadPoolExecutor
import argparse

# API-–∫–ª—é—á VirusTotal
VIRUSTOTAL_API_KEY = ''  # –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π API-–∫–ª—é—á
VIRUS_DB = 'virus_db.txt'
SCAN_HISTORY = 'scan_history.txt'
HASH_CACHE = {}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(filename='antivirus.log', level=logging.ERROR, format='%(asctime)s - %(message)s')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è SHA256-—Ö—ç—à–∞ —Ñ–∞–π–ª–∞
def calculate_file_hash(file_path):
    if file_path in HASH_CACHE:
        return HASH_CACHE[file_path]

    sha256_hash = hashlib.sha256()
    try:
        with open(file_path, 'rb') as f:
            for byte_block in iter(lambda: f.read(4096), b""):
                sha256_hash.update(byte_block)
        HASH_CACHE[file_path] = sha256_hash.hexdigest()
        return sha256_hash.hexdigest()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —Ö—ç—à–∞ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return None

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö—ç—à–∞ —á–µ—Ä–µ–∑ VirusTotal
def fetch_hashes_from_virustotal(file_hash, file_path):
    time.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 1 —Å–µ–∫—É–Ω–¥—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    url = f'https://www.virustotal.com/api/v3/files/{file_hash}'
    headers = {'x-apikey': VIRUSTOTAL_API_KEY}

    try:
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            data = response.json()
            if data['data']['attributes']['last_analysis_stats']['malicious'] > 0:
                with open(VIRUS_DB, 'a') as db:
                    db.write(f'{file_hash} | {file_path}\n')
                with open(SCAN_HISTORY, 'a') as history:
                    history.write(f'{datetime.datetime.now()} | –í—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–π —Ñ–∞–π–ª: {file_path}\n')
                return False
            else:
                with open(SCAN_HISTORY, 'a') as history:
                    history.write(f'{datetime.datetime.now()} | –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ñ–∞–π–ª: {file_path}\n')
                return True
        else:
            return None
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ VirusTotal: {e}')
        return None

# –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
def scan_file(progress_bar, status_label):
    file_path = filedialog.askopenfilename(title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
    if file_path:
        progress_bar.pack(pady=10)
        status_label.config(text="üîÑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞...")
        progress_bar.start()

        file_hash = calculate_file_hash(file_path)
        if file_hash:
            result = fetch_hashes_from_virustotal(file_hash, file_path)
            if result is False:
                messagebox.showwarning("‚ö†Ô∏è –í—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–π —Ñ–∞–π–ª", f"–§–∞–π–ª {file_path} –∑–∞—Ä–∞–∂–µ–Ω!")
            elif result is True:
                messagebox.showinfo("‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ñ–∞–π–ª", f"–§–∞–π–ª {file_path} –±–µ–∑–æ–ø–∞—Å–µ–Ω.")
            else:
                messagebox.showerror("‚ùå –û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª.")

        progress_bar.stop()
        progress_bar.pack_forget()
        status_label.config(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª")
    else:
        messagebox.showinfo("‚ùå –û—Ç–º–µ–Ω–∞", "–§–∞–π–ª –Ω–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω.")

# –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞
def scan_home_directory(progress_bar, status_label):
    home_dir = os.path.expanduser("~")
    malicious_files = 0
    total_files = 0

    progress_bar.pack(pady=10)
    status_label.config(text="üîÑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞...")
    progress_bar.start()

    file_paths = []
    for root, _, files in os.walk(home_dir):
        for file in files:
            file_paths.append(os.path.join(root, file))

    total_files = len(file_paths)

    def scan_file_in_thread(file_path):
        file_hash = calculate_file_hash(file_path)
        if file_hash:
            return fetch_hashes_from_virustotal(file_hash, file_path)
        return None

    with ThreadPoolExecutor(max_workers=4) as executor:
        results = list(executor.map(scan_file_in_thread, file_paths))

    malicious_files = sum(1 for result in results if result is False)

    progress_bar.stop()
    progress_bar.pack_forget()
    status_label.config(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª")
    messagebox.showinfo(
        "üìä –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
        f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {total_files}\n–í—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {malicious_files}"
    )

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def update_virus_db():
    try:
        import subprocess
        subprocess.run(['python3', 'virus_updater.py'], check=True)
        messagebox.showinfo("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ", "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–∏—Ä—É—Å–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    except subprocess.CalledProcessError:
        messagebox.showerror("‚ùå –û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")

# –ò—Å—Ç–æ—Ä–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
def show_scan_history():
    history_window = tk.Toplevel()
    history_window.title("üìú –ò—Å—Ç–æ—Ä–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
    history_window.geometry("500x400")
    text_area = tk.Text(history_window, wrap='word')
    text_area.pack(expand=1, fill='both')

    try:
        with open(SCAN_HISTORY, 'r') as history:
            text_area.insert('1.0', history.read())
    except FileNotFoundError:
        text_area.insert('1.0', "–ò—Å—Ç–æ—Ä–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É—Å—Ç–∞.")
    text_area.config(state='disabled')

# GUI
def create_gui():
    root = tk.Tk()
    root.title("üõ°Ô∏è Linux Antivirus")
    root.geometry("600x500")
    root.configure(bg="#1E1E2E")

    style = ttk.Style()
    style.configure('TButton', font=('Arial', 12), padding=10, background="#4CAF50")
    style.configure('TLabel', font=('Arial', 12), background="#1E1E2E", foreground="white")
    style.configure('TFrame', background="#1E1E2E")

    tab_control = ttk.Notebook(root)
    tab_scan = ttk.Frame(tab_control)
    tab_history = ttk.Frame(tab_control)
    tab_update = ttk.Frame(tab_control)

    tab_control.add(tab_scan, text="üõ°Ô∏è –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
    tab_control.add(tab_history, text="üìú –ò—Å—Ç–æ—Ä–∏—è")
    tab_control.add(tab_update, text="üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
    tab_control.pack(expand=1, fill='both')

    # –í–∫–ª–∞–¥–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    status_label = ttk.Label(tab_scan, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª")
    status_label.pack(pady=10)
    progress_bar = ttk.Progressbar(tab_scan, mode='indeterminate')

    ttk.Button(tab_scan, text="üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª", command=lambda: scan_file(progress_bar, status_label)).pack(pady=10)
    ttk.Button(tab_scan, text="üè† –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–æ–º–∞—à–Ω–∏–π –∫–∞—Ç–∞–ª–æ–≥",
               command=lambda: scan_home_directory(progress_bar, status_label)).pack(pady=10)

    # –í–∫–ª–∞–¥–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
    ttk.Button(tab_history, text="üìú –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é", command=show_scan_history).pack(pady=20)

    # –í–∫–ª–∞–¥–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    ttk.Button(tab_update, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", command=update_virus_db).pack(pady=20)

    footer = ttk.Label(root, text="¬© 2024 Linux Antivirus. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.", font=("Arial", 10))
    footer.pack(side='bottom', pady=10)

    root.mainloop()

# –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
def main():
    parser = argparse.ArgumentParser(description="Linux Antivirus")
    parser.add_argument('--scan-file', help="–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª")
    parser.add_argument('--scan-home', action='store_true', help="–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–æ–º–∞—à–Ω–∏–π –∫–∞—Ç–∞–ª–æ–≥")
    args = parser.parse_args()

    if args.scan_file:
        file_hash = calculate_file_hash(args.scan_file)
        if file_hash:
            result = fetch_hashes_from_virustotal(file_hash, args.scan_file)
            if result is False:
                print(f"–§–∞–π–ª {args.scan_file} –∑–∞—Ä–∞–∂–µ–Ω!")
            elif result is True:
                print(f"–§–∞–π–ª {args.scan_file} –±–µ–∑–æ–ø–∞—Å–µ–Ω.")
            else:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª.")
    elif args.scan_home:
        scan_home_directory(None, None)
    else:
        create_gui()

if __name__ == '__main__':
    main()
